// <auto-generated />
using System;
using FamilyRehabilitationCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyRehabilitationCenter.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119193247_add-loclization-for-Education")]
    partial class addloclizationforEducation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantLocationId")
                        .HasColumnType("int");

                    b.Property<int>("BirthLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalInfoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApplicantId");

                    b.HasIndex("ApplicantLocationId")
                        .IsUnique();

                    b.HasIndex("BirthLocationId");

                    b.HasIndex("ClassificationId")
                        .IsUnique();

                    b.HasIndex("EducationalInfoId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassification", b =>
                {
                    b.Property<int>("ApplicantClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantClassificationId"));

                    b.Property<int>("ApplicantClassificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantClassificationId");

                    b.HasIndex("ApplicantClassificationTypeId");

                    b.ToTable("ApplicantClassifications");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassificationType", b =>
                {
                    b.Property<int>("ApplicantClassificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantClassificationTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantClassificationTypeId");

                    b.ToTable("ApplicantClassificationTypes");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantInsuranceInfo", b =>
                {
                    b.Property<int>("ApplicantInsuranceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantInsuranceInfoId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceLevelId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplicantHasInsurance")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantInsuranceInfoId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("InsuranceLevelId");

                    b.HasIndex("InsuranceTypeId");

                    b.ToTable("ApplicantInsuranceInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantLocationInfo", b =>
                {
                    b.Property<int>("LocationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationInfoId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("HomeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("ResidentialNeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationInfoId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidentialNeighborhoodId");

                    b.ToTable("ApplicantLocations");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantParentInfo", b =>
                {
                    b.Property<int>("ApplicantParentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantParentInfoId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("ApplicantParentInfoId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ParentId");

                    b.ToTable("ApplicantsParentsInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantWorkInfo", b =>
                {
                    b.Property<int>("ApplicantWorkInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantWorkInfoId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantWorkInfoId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("ApplicantWorkInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantsComplaints", b =>
                {
                    b.Property<int>("ApplicantComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantComplaintId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("ComplaintTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantComplaintId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ComplaintTypeId");

                    b.ToTable("ApplicantsComplaints");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.BirthLocation", b =>
                {
                    b.Property<int>("BirthLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirthLocationId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("BirthLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("BirthLocations");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<int>("CompanyFieldId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSectorId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyFieldId");

                    b.HasIndex("WorkSectorId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.CompanyFieldType", b =>
                {
                    b.Property<int>("CompanyFieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyFieldTypeId"));

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyFieldTypeId");

                    b.ToTable("CompanyFieldTypes");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("ComplaintName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplaintId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ContactInfo", b =>
                {
                    b.Property<int>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ContactInfoId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.EducationalInfo", b =>
                {
                    b.Property<int>("EducationalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationalInfoId"));

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIlliterate")
                        .HasColumnType("bit");

                    b.Property<int>("MinistryEducationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationalInfoId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("MinistryEducationId");

                    b.ToTable("EducationalInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.InsuranceLevel", b =>
                {
                    b.Property<int>("InsuranceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceLevelId"));

                    b.Property<int>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceLevelId");

                    b.HasIndex("InsuranceTypeId");

                    b.ToTable("InsuranceLevels");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.InsuranceType", b =>
                {
                    b.Property<int>("InsuranceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSectorId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("InsuranceTypeId");

                    b.ToTable("InsuranceTypes");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.MinistryEducation", b =>
                {
                    b.Property<int>("MinistryEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MinistryEducationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MinistryEducationId");

                    b.ToTable("MinistryEducations");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.MinistryEducationLevel", b =>
                {
                    b.Property<int>("MinistryEducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MinistryEducationLevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinistryEducationId")
                        .HasColumnType("int");

                    b.HasKey("MinistryEducationLevelId");

                    b.HasIndex("MinistryEducationId");

                    b.ToTable("MinistryEducationLevels");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<int>("EducationInfoId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("RelationType")
                        .HasColumnType("bit")
                        .HasComment("0 = Mother, 1 = Father");

                    b.HasKey("ParentId");

                    b.HasIndex("EducationInfoId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ParentWorkInfo", b =>
                {
                    b.Property<int>("ParentWorkInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentWorkInfoId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyJobTitleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int>("JopTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentWorkInfoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyJobTitleId")
                        .IsUnique();

                    b.HasIndex("JobTitleId");

                    b.HasIndex("JopTitleId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("ParentsWorksInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<DateTime>("ActiveDateOfBirth")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("DATEDIFF(DAY, DateOfBirth, GETDATE())", false);

                    b.Property<int>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PersonId");

                    b.HasIndex("ContactInfoId")
                        .IsUnique();

                    b.HasIndex("NationalityId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Relative", b =>
                {
                    b.Property<int>("RelativeId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelativeTypeId")
                        .HasColumnType("int");

                    b.HasKey("RelativeId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.RelativeType", b =>
                {
                    b.Property<int>("RelativeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelativeTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelativeTypeId");

                    b.ToTable("RelativeTypes");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.WorkSectorType", b =>
                {
                    b.Property<int>("WorkSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkSectorTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkSectorTypeId");

                    b.ToTable("WorkSectorTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Applicant", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.ApplicantLocationInfo", "ApplicantLocation")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Applicant", "ApplicantLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.BirthLocation", "BirthLocation")
                        .WithMany()
                        .HasForeignKey("BirthLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassification", "ApplicantClassification")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Applicant", "ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.EducationalInfo", "EducationalInfo")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Applicant", "EducationalInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.User", "User")
                        .WithOne("Applicant")
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Applicant", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicantClassification");

                    b.Navigation("ApplicantLocation");

                    b.Navigation("BirthLocation");

                    b.Navigation("EducationalInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassification", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassificationType", "ApplicantClassificationType")
                        .WithMany("ApplicantClassifications")
                        .HasForeignKey("ApplicantClassificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicantClassificationType");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantInsuranceInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Applicant", "Applicant")
                        .WithMany("ApplicantInsuranceInfo")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.InsuranceLevel", "InsuranceLevel")
                        .WithMany("InsuranceInfos")
                        .HasForeignKey("InsuranceLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.InsuranceType", "InsuranceType")
                        .WithMany("ApplicantInsuranceInfo")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("InsuranceLevel");

                    b.Navigation("InsuranceType");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantLocationInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.District", "District")
                        .WithMany()
                        .HasForeignKey("ResidentialNeighborhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantParentInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Applicant", "Applicant")
                        .WithMany("Parents")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Parent", "Parent")
                        .WithMany("ApplicantsParentsInfo")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantWorkInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Applicant", "Applicant")
                        .WithMany("WorkInfos")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Company", "Company")
                        .WithMany("ApplicantsWorking")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.JobTitle", "JobTitle")
                        .WithMany("ApplicantsWorkInfo")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Applicant");

                    b.Navigation("Company");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantsComplaints", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Applicant", "Applicant")
                        .WithMany("ApplicantsComplaints")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Complaint", "Complaint")
                        .WithMany("ApplicantsComplaints")
                        .HasForeignKey("ComplaintTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.BirthLocation", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.City", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Company", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.CompanyFieldType", "CompanyField")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.WorkSectorType", "WorkSector")
                        .WithMany("Companies")
                        .HasForeignKey("WorkSectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyField");

                    b.Navigation("WorkSector");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ContactInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Relative", "Relative")
                        .WithOne("ContactInfo")
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.ContactInfo", "ContactInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.District", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.EducationalInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.MinistryEducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.MinistryEducation", "MinistryEducation")
                        .WithMany()
                        .HasForeignKey("MinistryEducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("MinistryEducation");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.InsuranceLevel", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.InsuranceType", "InsuranceType")
                        .WithMany("InsuranceLevels")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceType");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.MinistryEducationLevel", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.MinistryEducation", "MinistryEducation")
                        .WithMany("MinistryEducationLevels")
                        .HasForeignKey("MinistryEducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MinistryEducation");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Parent", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.EducationalInfo", "EducationInfo")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Parent", "EducationInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Person", "Person")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Parent", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationInfo");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ParentWorkInfo", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Company", null)
                        .WithMany("ParentWorkInfo")
                        .HasForeignKey("CompanyId");

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Company", "Company")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.ParentWorkInfo", "CompanyJobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.JobTitle", null)
                        .WithMany("ParentsWorksInfos")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.JobTitle", "JobTitle")
                        .WithOne()
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.ParentWorkInfo", "JopTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Parent", "Parent")
                        .WithMany("ParentsWorksInfos")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobTitle");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Person", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.ContactInfo", "ContactInfo")
                        .WithOne("Person")
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.Person", "ContactInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactInfo");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Region", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Relative", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Applicant", "Applicant")
                        .WithMany("Relatives")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.RelativeType", "RelativeType")
                        .WithMany("Relatives")
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("RelativeType");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.User", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("FamilyRehabilitationCenter.Domain.Entites.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FamilyRehabilitationCenter.Domain.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Applicant", b =>
                {
                    b.Navigation("ApplicantInsuranceInfo");

                    b.Navigation("ApplicantsComplaints");

                    b.Navigation("Parents");

                    b.Navigation("Relatives");

                    b.Navigation("WorkInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ApplicantClassificationType", b =>
                {
                    b.Navigation("ApplicantClassifications");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Company", b =>
                {
                    b.Navigation("ApplicantsWorking");

                    b.Navigation("ParentWorkInfo");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.CompanyFieldType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Complaint", b =>
                {
                    b.Navigation("ApplicantsComplaints");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.ContactInfo", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.InsuranceLevel", b =>
                {
                    b.Navigation("InsuranceInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.InsuranceType", b =>
                {
                    b.Navigation("ApplicantInsuranceInfo");

                    b.Navigation("InsuranceLevels");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.JobTitle", b =>
                {
                    b.Navigation("ApplicantsWorkInfo");

                    b.Navigation("ParentsWorksInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.MinistryEducation", b =>
                {
                    b.Navigation("MinistryEducationLevels");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Parent", b =>
                {
                    b.Navigation("ApplicantsParentsInfo");

                    b.Navigation("ParentsWorksInfos");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Region", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.Relative", b =>
                {
                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.RelativeType", b =>
                {
                    b.Navigation("Relatives");
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.User", b =>
                {
                    b.Navigation("Applicant")
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyRehabilitationCenter.Domain.Entites.WorkSectorType", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
